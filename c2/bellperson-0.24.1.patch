diff --git a/Cargo.toml b/Cargo.toml
index b5fd13d..84bd015 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -36,6 +36,7 @@ blstrs = { version = "0.6.0", features = ["__private_bench"] }
 pairing = "0.22"
 ec-gpu = { version = "0.2.0" }
 ec-gpu-gen = { version = "0.5.0" }
+supraseal-c2 = { path = ".." }
 
 fs2 = { version = "0.4.3", optional = true }
 
diff --git a/src/groth16/mapped_params.rs b/src/groth16/mapped_params.rs
index ea3d051..8942e75 100644
--- a/src/groth16/mapped_params.rs
+++ b/src/groth16/mapped_params.rs
@@ -19,7 +19,7 @@ pub struct MappedParameters<E>
 where
     E: MultiMillerLoop,
 {
-    /// The parameter file we're reading from.  
+    /// The parameter file we're reading from.
     pub param_file_path: PathBuf,
     /// The file descriptor we have mmaped.
     pub param_file: File,
@@ -60,6 +60,10 @@ where
     type G1Builder = (Arc<Vec<E::G1Affine>>, usize);
     type G2Builder = (Arc<Vec<E::G2Affine>>, usize);
 
+    fn get_file_path(&self) -> PathBuf {
+        return self.param_file_path.clone();
+    }
+
     fn get_vk(&self, _: usize) -> Result<&VerifyingKey<E>, SynthesisError> {
         Ok(&self.vk)
     }
diff --git a/src/groth16/params.rs b/src/groth16/params.rs
index 741d36b..147309f 100644
--- a/src/groth16/params.rs
+++ b/src/groth16/params.rs
@@ -412,6 +412,7 @@ where
     type G1Builder: SourceBuilder<E::G1Affine>;
     type G2Builder: SourceBuilder<E::G2Affine>;
 
+    fn get_file_path(&self) -> PathBuf;
     fn get_vk(&self, num_ic: usize) -> Result<&VerifyingKey<E>, SynthesisError>;
     fn get_h(&self, num_h: usize) -> Result<Self::G1Builder, SynthesisError>;
     fn get_l(&self, num_l: usize) -> Result<Self::G1Builder, SynthesisError>;
@@ -439,6 +440,10 @@ where
     type G1Builder = (Arc<Vec<E::G1Affine>>, usize);
     type G2Builder = (Arc<Vec<E::G2Affine>>, usize);
 
+    fn get_file_path(&self) -> PathBuf {
+        PathBuf::from("")
+    }
+
     fn get_vk(&self, _: usize) -> Result<&VerifyingKey<E>, SynthesisError> {
         Ok(&self.vk)
     }
diff --git a/src/groth16/proof.rs b/src/groth16/proof.rs
index 0afb4f2..b076c89 100644
--- a/src/groth16/proof.rs
+++ b/src/groth16/proof.rs
@@ -9,6 +9,7 @@ use rayon::prelude::*;
 use serde::de::Visitor;
 use serde::{Deserialize, Deserializer, Serialize, Serializer};
 
+#[repr(C)]
 #[derive(Clone, Debug)]
 pub struct Proof<E: Engine> {
     pub a: E::G1Affine,
diff --git a/src/groth16/prover.rs b/src/groth16/prover.rs
index 49c3c20..afab181 100644
--- a/src/groth16/prover.rs
+++ b/src/groth16/prover.rs
@@ -256,7 +256,11 @@ where
     E::G1Affine: GpuName,
     E::G2Affine: GpuName,
 {
-    create_proof_batch_priority_inner(circuits, params, None, priority)
+    if circuits.len() == 1 {
+        create_proof_batch_priority_inner(circuits, params, None, priority)
+    } else {
+        create_proof_batch_priority_inner_modified(circuits, params, None, priority)
+    }
 }
 
 /// creates a batch of proofs where the randomization vector is already
@@ -276,7 +280,11 @@ where
     E::G1Affine: GpuName,
     E::G2Affine: GpuName,
 {
-    create_proof_batch_priority_inner(circuits, params, Some((r_s, s_s)), priority)
+    if circuits.len() == 1 {
+        create_proof_batch_priority_inner(circuits, params, Some((r_s, s_s)), priority)
+    } else {
+        create_proof_batch_priority_inner_modified(circuits, params, Some((r_s, s_s)), priority)
+    }
 }
 
 #[allow(clippy::type_complexity)]
@@ -786,3 +794,154 @@ mod tests {
         }
     }
 }
+
+#[allow(clippy::type_complexity)]
+#[allow(clippy::needless_collect)]
+fn create_proof_batch_priority_inner_modified<E, C, P: ParameterSource<E>>(
+    circuits: Vec<C>,
+    params: P,
+    randomization: Option<(Vec<E::Fr>, Vec<E::Fr>)>,
+    _priority: bool,
+) -> Result<Vec<Proof<E>>, SynthesisError>
+where
+    E: MultiMillerLoop,
+    C: Circuit<E::Fr> + Send,
+    E::Fr: GpuName,
+    E::G1Affine: GpuName,
+    E::G2Affine: GpuName,
+{
+    let srs = match supraseal_c2::SRS::try_new(params.get_file_path(), true) {
+        Ok(srs) => srs,
+        Err(err) => panic!(
+            "Failed to read SRS file with message: {}",
+            String::from(err)
+        ),
+    };
+
+    let provers = synthesize_circuits_batch_modified(circuits)?;
+
+    // Start fft/multiexp prover timer
+    let start = Instant::now();
+    info!("starting proof timer");
+
+    let n = provers[0].a.len();
+    let a_aux_density_total = provers[0].a_aux_density.get_total_density();
+    let b_input_density_total = provers[0].b_input_density.get_total_density();
+    let b_aux_density_total = provers[0].b_aux_density.get_total_density();
+    let num_circuits = provers.len();
+
+    // Make sure all circuits have the same input len.
+    for prover in &provers {
+        assert_eq!(
+            prover.a.len(),
+            n,
+            "only equaly sized circuits are supported"
+        );
+        debug_assert_eq!(
+            a_aux_density_total,
+            prover.a_aux_density.get_total_density(),
+            "only identical circuits are supported"
+        );
+        debug_assert_eq!(
+            b_input_density_total,
+            prover.b_input_density.get_total_density(),
+            "only identical circuits are supported"
+        );
+        debug_assert_eq!(
+            b_aux_density_total,
+            prover.b_aux_density.get_total_density(),
+            "only identical circuits are supported"
+        );
+    }
+
+    impl<Scalar> Into<supraseal_c2::Assignment<Scalar>> for &ProvingAssignment<Scalar>
+    where
+        Scalar: PrimeField,
+    {
+        fn into(self) -> supraseal_c2::Assignment<Scalar> {
+            assert_eq!(self.a.len(), self.b.len());
+            assert_eq!(self.a.len(), self.c.len());
+
+            supraseal_c2::Assignment::<Scalar> {
+                a_aux_density: self.a_aux_density.bv.as_raw_slice().as_ptr(),
+                a_aux_bit_len: self.a_aux_density.bv.len(),
+                a_aux_popcount: self.a_aux_density.get_total_density(),
+
+                b_inp_density: self.b_input_density.bv.as_raw_slice().as_ptr(),
+                b_inp_bit_len: self.b_input_density.bv.len(),
+                b_inp_popcount: self.b_input_density.get_total_density(),
+
+                b_aux_density: self.b_aux_density.bv.as_raw_slice().as_ptr(),
+                b_aux_bit_len: self.b_aux_density.bv.len(),
+                b_aux_popcount: self.b_aux_density.get_total_density(),
+
+                a: self.a.as_ptr(),
+                b: self.b.as_ptr(),
+                c: self.c.as_ptr(),
+                abc_size: self.a.len(),
+
+                inp_assignment_data: self.input_assignment.as_ptr(),
+                inp_assignment_size: self.input_assignment.len(),
+
+                aux_assignment_data: self.aux_assignment.as_ptr(),
+                aux_assignment_size: self.aux_assignment.len(),
+            }
+        }
+    }
+
+    let provers_c2: Vec<supraseal_c2::Assignment<E::Fr>> =
+        provers.iter().map(|p| p.into()).collect();
+
+    let (r_s, s_s) = randomization.unwrap_or((
+        vec![E::Fr::zero(); num_circuits],
+        vec![E::Fr::zero(); num_circuits],
+    ));
+
+    let mut proofs: Vec<Proof<E>> = Vec::with_capacity(num_circuits);
+    unsafe { proofs.set_len(num_circuits) };
+
+    supraseal_c2::generate_groth16_proofs(
+        provers_c2.as_slice(),
+        r_s.as_slice(),
+        s_s.as_slice(),
+        proofs.as_mut_slice(),
+        &srs,
+    );
+
+    let proof_time = start.elapsed();
+    info!("prover time: {:?}", proof_time);
+
+    Ok(proofs)
+}
+
+#[allow(clippy::type_complexity)]
+fn synthesize_circuits_batch_modified<Scalar, C>(
+    circuits: Vec<C>,
+) -> Result<std::vec::Vec<ProvingAssignment<Scalar>>, SynthesisError>
+where
+    Scalar: PrimeField,
+    C: Circuit<Scalar> + Send,
+{
+    let start = Instant::now();
+
+    let provers = circuits
+        .into_par_iter()
+        .map(|circuit| -> Result<_, SynthesisError> {
+            let mut prover = ProvingAssignment::new();
+
+            prover.alloc_input(|| "", || Ok(Scalar::one()))?;
+
+            circuit.synthesize(&mut prover)?;
+
+            for i in 0..prover.input_assignment.len() {
+                prover.enforce(|| "", |lc| lc + Variable(Index::Input(i)), |lc| lc, |lc| lc);
+            }
+
+            Ok(prover)
+        })
+        .collect::<Result<Vec<_>, _>>()?;
+
+    info!("synthesis time: {:?}", start.elapsed());
+
+    Ok(provers)
+}
